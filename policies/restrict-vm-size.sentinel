# Policy to restrict which "size" that can be used on ["azurerm_virtual_machine", "azurerm_linux_virtual_machine", "azurerm_windows_virtual_machine"] resources

# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan

# List of allowed VM Sizes
param allowed_sizes default [
    "Standard_D2as_v4",
    "Standard_E112ias_v5",
    "Standard_DS1_v2",
    "Standard_D4s_v3",
    "Standard_D4_v2",
    "Standard_D4_v3",
    "Standard_E2s_v3",
    "Standard_D2s_v3",
    "Standard_E4ads_v5",
    "Standard_D8s_v3",
    "Standard_DS13_v2",
    "Standard_B1ls",
    "Standard_DS3_V2",
    "Standard_DS4_v2",
    "Standard_D2_v3",
    "Standard_NC16as_T4_v3",
    "Standard_E2s_v4",
    "Standard_B4ms",
    "Standard_E2ads_v5",
    "Standard_B1s",
	  "Standard_B8ms",
	  "Standard_D16s_v3",
  ]

# Get all Azure VMs
all_azure_vms = plan.find_resources("azurerm_virtual_machine")
all_azure_windows_vms = plan.find_resources("azurerm_windows_virtual_machine")
all_azure_linux_vms = plan.find_resources("azurerm_linux_virtual_machine")

# Filter to Azure VMs with violations
# Warnings will be printed for all violations since the last parameter is true
violating_azure_vms = plan.filter_attribute_not_in_list(all_azure_vms, "vm_size", allowed_sizes, true)
violating_azure_windows_vms = plan.filter_attribute_not_in_list(all_azure_windows_vms, "size", allowed_sizes, true)
violating_azure_linux_vms = plan.filter_attribute_not_in_list(all_azure_linux_vms, "size", allowed_sizes, true)

# Main rule
main = rule {
	length(violating_azure_vms["messages"]) is 0 and
	length(violating_azure_windows_vms["messages"]) is 0 and
	length(violating_azure_linux_vms["messages"]) is 0
}
